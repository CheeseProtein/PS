#include <iostream>
#include <cstring>

// dx, dy
int blocks[][2][4] = {
    { { 0,1,2,3 },{ 0,0,0,0 } },  // I1
    { { 0,0,0,0 },{ 0,1,2,3 } },  // I2
    { { 0,1,0,1 },{ 0,0,1,1 } },  // O
    { { 0,0,0,1 },{ 0,1,2,2 } },  // L1
    { { 0,1,2,2 },{ 1,1,1,0 } },  // L2
    { { 0,1,1,1 },{ 0,0,1,2 } },  // L3
    { { 0,0,1,2 },{ 1,0,0,0 } },  // L4
    { { 0,1,1,1 },{ 2,2,1,0 } },  // J1
    { { 0,1,2,2 },{ 0,0,0,1 } },  // J2
    { { 0,0,0,1 },{ 2,1,0,0 } },  // J3
    { { 0,0,1,2 },{ 0,1,1,1 } },  // J4
    { { 0,1,1,2 },{ 0,0,1,1 } },  // Z1
    { { 0,0,1,1 },{ 2,1,1,0 } },  // Z2
    { { 0,1,1,2 },{ 1,1,0,0 } },  // S1
    { { 0,0,1,1 },{ 0,1,1,2 } },  // S2
    { { 0,1,2,1 },{ 0,0,0,1 } },  // T1
    { { 0,0,0,1 },{ 0,1,2,1 } },  // T2
    { { 0,1,2,1 },{ 1,1,1,0 } },  // T3
    { { 0,1,1,1 },{ 1,0,1,2 } }   // T4
};

int N, M;
int board[503][503];
int main() {
    memset(board, -1, sizeof board);
    scanf("%d%d", &N, &M);
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            scanf("%d", &board[i][j]);
        }
    }
    int max = 0;
    int sum = 0;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            for (int l = 0; l < 19; ++l) {
                sum = 0;
                for (int k = 0; k < 4; ++k) {
                    sum += board[i + blocks[l][1][k]][j + blocks[l][0][k]];
                }
                if (sum > max) max = sum;
            }
        }
    }
    printf("%d", max);
    return 0;
}
